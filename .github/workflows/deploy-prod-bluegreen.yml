name: Deploy Production (Blue/Green, local)

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Existing local tag (commit SHA or 'main')"
        required: true
        type: string

jobs:
  prod-bluegreen:
    runs-on: self-hosted
    environment:
      name: production
      url: http://localhost:8080

    steps:
      - name: Verify image exists locally (no build)
        run: |
          set -e
          IMAGE=php-hello
          TAG="${{ inputs.image_tag }}"
          docker image inspect ${IMAGE}:${TAG} >/dev/null 2>&1 || {
            echo "Image ${IMAGE}:${TAG} not found locally. Build it first (push to main) or use 'main'."; exit 1; }

      - name: Prepare network and write configs
        run: |
          set -e
          NET=php-hello-net
          GDIR="$HOME/.php-hello-gateway"
          mkdir -p "$GDIR"
          docker network create $NET 2>/dev/null || true

          cat > "$GDIR/site.conf" <<'NGINX'
          include /etc/nginx/conf.d/upstream.conf;
          server {
            listen 80;
            location / {
              proxy_pass http://app_upstream;
              proxy_set_header Host $host;
              proxy_set_header X-Forwarded-For $remote_addr;
            }
          }
          NGINX

          cat > "$GDIR/upstream-blue.conf" <<'NGX'
          upstream app_upstream { server php-hello-blue:80; }
          NGX
          cat > "$GDIR/upstream-green.conf" <<'NGX'
          upstream app_upstream { server php-hello-green:80; }
          NGX

          # If link missing, default to BLUE
          [ -e "$GDIR/upstream.conf" ] || ln -s "$GDIR/upstream-blue.conf" "$GDIR/upstream.conf"

      - name: Bootstrap first run if needed (create both colors)
        id: bootstrap
        run: |
          set -e
          IMAGE=php-hello
          TAG="${{ inputs.image_tag }}"
          NET=php-hello-net
          GDIR="$HOME/.php-hello-gateway"

          have_blue=$(docker ps -a --format '{{.Names}}' | grep -w "^php-hello-blue$" || true)
          have_green=$(docker ps -a --format '{{.Names}}' | grep -w "^php-hello-green$" || true)

          if [ -z "$have_blue$have_green" ]; then
            echo "first_run=true" >> $GITHUB_OUTPUT

            # Bring up BOTH colors with the same tag so gateway can resolve either
            docker run -d --name php-hello-blue  --restart unless-stopped --network $NET ${IMAGE}:${TAG}
            docker run -d --name php-hello-green --restart unless-stopped --network $NET ${IMAGE}:${TAG}

            # Health check both (quick)
            for C in php-hello-blue php-hello-green; do
              for i in {1..30}; do
                docker exec $C sh -lc "wget -qO- http://127.0.0.1/health >/dev/null" && break || sleep 1
              done
              docker exec $C sh -lc "wget -qO- http://127.0.0.1/health" >/dev/null
            done

            # Point upstream to BLUE for the initial serve
            ln -sfn "$GDIR/upstream-blue.conf" "$GDIR/upstream.conf"
          else
            echo "first_run=false" >> $GITHUB_OUTPUT
          fi

      - name: Start or reload gateway (always after containers exist)
        run: |
          set -e
          NET=php-hello-net
          GDIR="$HOME/.php-hello-gateway"
          GW=php-hello-gateway

          # If gateway exists but not running, remove it to avoid stale mounts
          if docker ps -a --format '{{.Names}} {{.Status}}' | grep -q "^${GW}\b"; then
            docker ps --format '{{.Names}}' | grep -q "^${GW}$" || docker rm -f $GW || true
          fi

          if docker ps --format '{{.Names}}' | grep -q "^${GW}$"; then
            docker exec $GW nginx -s reload || true
          else
            docker run -d --name $GW --restart unless-stopped \
              --network $NET -p 8080:80 \
              -v "$GDIR/site.conf:/etc/nginx/conf.d/site.conf:ro" \
              -v "$GDIR/upstream.conf:/etc/nginx/conf.d/upstream.conf:ro" \
              nginx:stable
          fi

      - name: Promote (only if not first run) - start idle with new tag, flip, stop old
        if: steps.bootstrap.outputs.first_run == 'false'
        run: |
          set -e
          IMAGE=php-hello
          TAG="${{ inputs.image_tag }}"
          NET=php-hello-net
          GDIR="$HOME/.php-hello-gateway"
          GW=php-hello-gateway

          if readlink "$GDIR/upstream.conf" | grep -q 'upstream-blue.conf'; then
            ACTIVE=blue; IDLE=green
          else
            ACTIVE=green; IDLE=blue
          fi
          echo "Active=$ACTIVE, Idle=$IDLE"

          docker rm -f php-hello-${IDLE} 2>/dev/null || true
          docker run -d --name php-hello-${IDLE} --restart unless-stopped --network $NET ${IMAGE}:${TAG}

          for i in {1..30}; do
            docker exec php-hello-${IDLE} sh -lc "wget -qO- http://127.0.0.1/health >/dev/null" && break || sleep 1
          done
          docker exec php-hello-${IDLE} sh -lc "wget -qO- http://127.0.0.1/health" >/dev/null

          # Flip to IDLE
          if [ "$IDLE" = "blue" ]; then
            ln -sfn "$GDIR/upstream-blue.conf" "$GDIR/upstream.conf"
          else
            ln -sfn "$GDIR/upstream-green.conf" "$GDIR/upstream.conf"
          fi
          docker exec $GW nginx -s reload || true

          # Stop old color
          sleep 2
          docker rm -f php-hello-${ACTIVE} 2>/dev/null || true

      - name: Smoke test gateway
        run: |
          for i in {1..20}; do curl -fsS http://localhost:8080/health && exit 0; sleep 1; done
          echo "Prod gateway health failed"; docker logs php-hello-gateway || true; exit 1
