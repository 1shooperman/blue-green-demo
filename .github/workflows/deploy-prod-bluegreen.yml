name: Deploy Production (Blue/Green, local)

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Existing local tag (commit SHA or 'main')"
        required: true
        type: string

jobs:
  prod-bluegreen:
    runs-on: self-hosted
    environment:
      name: production
      url: http://localhost:8080

    steps:
      - name: Verify image exists locally
        run: |
          set -e
          IMAGE=php-hello
          TAG="${{ inputs.image_tag }}"
          docker image inspect ${IMAGE}:${TAG} >/dev/null 2>&1 || {
            echo "Image ${IMAGE}:${TAG} not found locally."; exit 1; }

      - name: Prepare network and config dir
        id: prep
        run: |
          set -e
          NET=php-hello-net
          GDIR="$HOME/.php-hello-gateway"
          mkdir -p "$GDIR"
          docker network create $NET 2>/dev/null || true
          echo "net=$NET"   >> $GITHUB_OUTPUT
          echo "gdir=$GDIR" >> $GITHUB_OUTPUT

          cat > "$GDIR/site.conf" <<'NGINX'
          server {
            listen 80 default_server;
            server_name _;
            location / {
              proxy_pass http://app_upstream;
              proxy_set_header Host $host;
              proxy_set_header X-Forwarded-For $remote_addr;
            }
          }
          NGINX

          # Ensure an empty file we can mount over nginx's default.conf
          : > "$GDIR/empty.conf"

      - name: Decide target color (first run blue, else idle of the two)
        id: decide
        run: |
          set -e
          is_blue_running=$(docker ps --format '{{.Names}}' | grep -w '^php-hello-blue$' || true)
          is_green_running=$(docker ps --format '{{.Names}}' | grep -w '^php-hello-green$' || true)
          if [ -z "$is_blue_running$is_green_running" ]; then
            ACTIVE=""
            TARGET="blue"   # first run
          else
            if [ -n "$is_blue_running" ]; then ACTIVE="blue"; TARGET="green"; else ACTIVE="green"; TARGET="blue"; fi
          fi
          echo "active=$ACTIVE" >> $GITHUB_OUTPUT
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "Promoting to: $TARGET (active=$ACTIVE)"

      - name: Start target backend and health-check
        id: backend
        run: |
          set -e
          IMAGE=php-hello
          TAG="${{ inputs.image_tag }}"
          NET="${{ steps.prep.outputs.net }}"
          TARGET="${{ steps.decide.outputs.target }}"

          docker rm -f php-hello-${TARGET} 2>/dev/null || true
          docker run -d --name php-hello-${TARGET} --restart unless-stopped \
            --network "$NET" ${IMAGE}:${TAG}

          for i in {1..40}; do
            docker exec php-hello-${TARGET} sh -lc "wget -qO- http://127.0.0.1/health >/dev/null" && break || sleep 1
          done
          docker exec php-hello-${TARGET} sh -lc "wget -qO- http://127.0.0.1/health" >/dev/null

          # Write upstream.conf to point at the TARGET by name (DNS ok because it's running)
          GDIR="${{ steps.prep.outputs.gdir }}"
          cat > "$GDIR/upstream.conf" <<NGX
          upstream app_upstream { server php-hello-${TARGET}:80; }
          NGX

      - name: Start/Reload gateway (disable default vhost)
        run: |
          set -e
          NET="${{ steps.prep.outputs.net }}"
          GDIR="${{ steps.prep.outputs.gdir }}"
          GW=php-hello-gateway

          # If gateway exists but isn't running cleanly, remove it
          if docker ps -a --format '{{.Names}} {{.Status}}' | grep -q "^${GW}\b"; then
            docker ps --format '{{.Names}}' | grep -q "^${GW}$" || docker rm -f $GW || true
          fi

          if docker ps --format '{{.Names}}' | grep -q "^${GW}$"; then
            docker exec $GW nginx -t || { docker logs $GW; exit 1; }
            docker exec $GW nginx -s reload || true
          else
            docker rm -f $GW 2>/dev/null || true
            docker run -d --name $GW --restart unless-stopped \
              --network "$NET" -p 8080:80 \
              -v "$GDIR/site.conf:/etc/nginx/conf.d/site.conf:ro" \
              -v "$GDIR/upstream.conf:/etc/nginx/conf.d/upstream.conf:ro" \
              -v "$GDIR/empty.conf:/etc/nginx/conf.d/default.conf:ro" \
              nginx:stable
            sleep 1
            docker exec $GW nginx -t || { docker logs $GW; exit 1; }
          fi

      - name: Stop old color (if any)
        if: steps.decide.outputs.active != ''
        run: |
          set -e
          OLD="${{ steps.decide.outputs.active }}"
          docker rm -f php-hello-${OLD} 2>/dev/null || true

      - name: Smoke test gateway
        run: |
          for i in {1..30}; do curl -fsS http://localhost:8080/health && exit 0; sleep 1; done
          echo "Prod gateway health failed"; docker logs php-hello-gateway || true; exit 1
